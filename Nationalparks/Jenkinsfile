// Jenkinsfile for nationalparks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    // This can be parameterized in pipeline, not gonna do for this static definition.
    def GUID = '90cd'
    def CLUSTER = 'na311'
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    
    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    // Defining base Maven command.
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checking out source.
    stage("Checking out source code") {
      git branch: '40h', changelog: false, poll: false, url: 'https://github.com/aizuddin85/advdev_homework_template.git'
    }

    // For those stages below use this directory as contextDir and set build definition.
    dir('Nationalparks'){
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")
      def devTag  = "${version}-${BUILD_NUMBER}"
      def prodTag = "${version}"
      def destApp   = "nationalparks-green"
      def activeApp = ""
      stage("Building Target"){
        // Start to build binary from the source code
        sh "${mvnCmd} clean package -DskipTests=true"
      }
      stage("Unit Test"){
        // Executing unit test
        sh "${mvnCmd} test"
      }
      stage("Code Analysis"){
        // Executing coverage test using SonarQube
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na311.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }
      stage("Publish Artifacts"){
        // Publish binary to Nexus for repository and later use
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }
      stage("Build & Tag Image"){
        // Delete old build definition and always exit True regardless exit code.
        sh "oc delete bc nationalparks -n ${GUID}-parks-dev || true"

        // Defining new build with new output target using Nexus mirror.
        sh "oc new-build --name=nationalparks --binary=true  redhat-openjdk18-openshift:1.2 --to=${GUID}-parks-dev/nationalparks:${devTag} -e MAVEN_MIRROR_URL=http://nexus3-${GUID}-nexus.apps.na311.openshift.opentlc.com/repository/maven-all-public -n ${GUID}-parks-dev"
        
        // Start to build the new build definition using artifact uploaded to Nexus above.
        sh "oc start-build nationalparks --follow --from-file=http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/nationalparks/${version}/nationalparks-${version}.jar -n ${GUID}-parks-dev"
        
        // Tag image with latest build number as latest image.
        sh "oc tag nationalparks:${devTag} nationalparks:latest -n ${GUID}-parks-dev"
      }
      stage("Deploying On Dev"){
        // Start to rollout latest image on Development.
        sh "oc rollout latest dc/nationalparks -n ${GUID}-parks-dev"
      }
      stage("Copy Image to Nexus"){
        // Image pushing to Nexus using Skopeo
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/nationalparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/nationalparks:${devTag}"
      }
      stage("Blue/Green Production Deployment"){
        // Determine which selector is currently active in the servi
        activeApp = sh(returnStdout: true, script: "oc get svc nationalparks -n \${GUID}-parks-prod -o jsonpath='{ .spec.selector.app }'").trim()

        // Set proper destApp based on service active selector and for the sake of verbosity and peace of mind, print it ou
        if (activeApp == "nationalparks-green"){
          destApp = "nationalparks-blue"
        }
        echo "Active Application:          " + activeApp
        echo "Destionation Application:    " + destApp

        // Remove any trigger, we want pipeline controlling the deployment and rollout.
        sh "oc set triggers dc/${destApp} --remove-all -n ${GUID}-parks-prod"

        // Now tag latest dev image tag as latest production deployment image. This preserve 'version'-->'latest' relationship for each Blue/Green.
        sh "oc tag ${GUID}-parks-dev/nationalparks:${devTag} ${GUID}-parks-dev/${destApp}:latest -n ${GUID}-parks-dev"

        // Set image on deployment always using tag latest.
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/${destApp}:latest -n ${GUID}-parks-prod"

        // Based on the destApp patch the service to activate new Blue or Green selector and rollout new deployment
        if (destApp == "nationalparks-blue"){
          sh "oc patch svc/nationalparks -p '{\"spec\":{\"selector\":{\"app\":\"nationalparks-blue\"}}}\' -n ${GUID}-parks-prod"
          sh "oc rollout latest dc/nationalparks-blue -n ${GUID}-parks-prod"
        }
        if (destApp == "nationalparks-green"){
          sh "oc patch svc/nationalparks -p '{\"spec\":{\"selector\":{\"app\":\"nationalparks-green\"}}}\' -n ${GUID}-parks-prod"
          sh "oc rollout latest dc/nationalparks-green -n ${GUID}-parks-prod"
        }        
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
